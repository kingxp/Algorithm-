Problem: Find First and Last Position of Element in Sorted Array

Discription:
        Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
        Your algorithm's runtime complexity must be in the order of O(log n).
        If the target is not found in the array, return [-1, -1].
        
Example 1:
        Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4]
        
Example 2:
        Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1]
        
My thought:
        Binary Search 
        利用一个函数search进行搜索，搜索的时候，flag代表搜索的位置，左侧flag为true 右测flag为false
        最难的是左侧和右侧的选择 收缩.

My Code:
    vector<int> Nums;
    int Target;
    int search(int left,int right,bool flag)
    {
        //flag代表了搜索的是左侧还是右侧
        while(left<right)
        {
            if(flag)
            {
                int mid = left+(right-left)/2;
                if(Nums[mid]>Target) right = mid-1; 
                else if(Nums[mid]<Target) left = mid+1;
                else right = mid;
            }
            else
            {
                int mid =(left+right+1)/2;
                if(Nums[mid]>Target) right = mid-1; //最难的地方
                else if(Nums[mid]==Target) left =mid; //最难的地方
            }
        }
        if(left==right&&Nums[left]==Target) return left;
        else return -1;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        Nums = nums;
        Target = target;
        vector<int> ans ={-1,-1};
        if(nums.size()==0) return ans;
        ans[0]=search(0,nums.size()-1,true);
        if(ans[0]==-1) return ans;
        ans[1]=search(ans[0],nums.size()-1,false);
        return ans;
    }
 
Result
	The runtime is 8ms.
	My runtime beats 62.33% of cpp submissions.
