Problem: Search in Rotated Sorted Array

Discription:
        Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
        (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
        You are given a target value to search. If found in the array return its index, otherwise return -1.
        You may assume no duplicate exists in the array.
        Your algorithm's runtime complexity must be in the order of O(log n).
        
Example 1:
        Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4
        
Example 2:
        Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1
        
My thought:
        Binary Search 
	最难的点是这样的，就是nums[mid]<nums[right] 意味着[mid,right]是有序的;nums[mid]>nums[right]意味着[left,mid]是有序的 
	

My Code:
        int search(vector<int>& nums, int target) {
        /*
        nums[mid]<nums[right] 右半边有序的 
            nums[mid]>target target 必然在左侧
            nums[mid]<target target>nums[right] 左侧
                             target<nums[right] 右侧  
        nums[mid]>nums[right] 左半边有序的
            nums[mid]>target target>nums[left] 左侧
                             target<nus[right] 右侧
            nums[mid]<target target必然在右侧
        */
        int left = 0;
        int right = nums.size()-1;
        while(left<=right)
        {
            int mid = left+(right-left)/2;
            if(nums[mid]==target) return mid;
            if(nums[left]==target) return left;
            if(nums[right]==target) return right;
            if(((nums[mid]<nums[right])&&(nums[mid]>target))||((nums[mid]<nums[right])&&(nums[mid]<target)&&(target>nums[right]))||((nums[mid]>nums[right])&&(nums[mid]>target)&&(target>nums[left]))) right = mid-1;
            else left = mid+1; 
        }
        return -1;
    }

Result
	The runtime is 8ms.
	My runtime beats 22.97% of cpp submissions.
